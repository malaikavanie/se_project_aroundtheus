!function(){"use strict";class e{constructor(e,t,r,s){this._name=e.name,this._link=e.link,this._id=e._id,this._cardSelector=t,this.handleImageClick=r,this._handleDeleteClick=s}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getId(){return this._id}_setEventListeners(){this._imageElement.addEventListener("click",(()=>{this.handleImageClick(this._name,this._link)})),this._likeButton.addEventListener("click",(()=>{this._likeCard()})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteClick(this)}))}deleteCard(){this._element.remove(),this._element=null}_likeCard(){this._likeButton.classList.toggle("card__like-button_active")}generateCard(){return this._element=this._getTemplate(),this._imageElement=this._element.querySelector(".card__image"),this._likeButton=this._element.querySelector(".card__like-button"),this._deleteButton=this._element.querySelector(".card__delete-button"),this._setEventListeners(),this._imageElement.setAttribute("src",this._link),this._imageElement.setAttribute("alt",this._name),this._element.querySelector(".card__title").textContent=this._name,this._element}}class t{constructor(e,t){let{inputSelector:r,submitButtonSelector:s,inactiveButtonClass:i,inputErrorClass:n,errorClass:o}=t;this._formElement=e,this._inputSelector=r,this._submitButtonSelector=s,this._inactiveButtonClass=i,this._inputErrorClass=n,this._errorClass=o}_showInputError=e=>{e.classList.add(this._inputErrorClass),this._errorElement.textContent=e.validationMessage,this._errorElement.classList.add(this._errorClass)};_hideInputError=e=>{e.classList.remove(this._inputErrorClass),this._errorElement.classList.remove(this._errorClass),this._errorElement.textContent=""};_checkInputValidity=e=>{this._errorElement=this._formElement.querySelector(`#${e.id}-error`),e.validity.valid?this._hideInputError(e):this._showInputError(e)};_hasInvalidInput=e=>e.some((e=>!e.validity.valid));_toggleButtonState=e=>{this._hasInvalidInput(e)?this.disableSubmit():(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.removeAttribute("disabled"))};_setEventListeners(){const e=Array.from(this._formElement.querySelectorAll(this._inputSelector));this._buttonElement=this._formElement.querySelector(this._submitButtonSelector),this._toggleButtonState(e),e.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._toggleButtonState(e)}))}))}checkValidity(){const e=Array.from(this._formElement.querySelectorAll(this._inputSelector));e.forEach((t=>{this._checkInputValidity(t),this._toggleButtonState(e)}))}enableValidation(){this._setEventListeners()}disableSubmit(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)}resetForm(){this._formElement.reset()}}class r{constructor(e){this._popupElement=document.querySelector(e)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keyup",this._handleEscClose)}close=()=>{this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keyup",this._handleEscClose)};_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._closeButton=this._popupElement.querySelector(".modal__close"),this._closeButton.addEventListener("click",this.close),this._popupElement.addEventListener("mousedown",(e=>{e.target===e.currentTarget&&this.close()}))}}class s extends r{constructor(e,t,r){let{formSelector:s}=r;super(e),this._form=this._popupElement.querySelector(s),this._button=this._form.querySelector(".modal__button"),this._originalButtonText=this._button.textContent,this._formSubmit=t,this._inputList=Array.from(this._form.querySelectorAll(".modal__input"))}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){this._form.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._formSubmit(t)})),super.setEventListeners()}renderSaving(e){this._button.textContent=e?"Saving...":this._originalButtonText}}const i={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_active",formSelector:".modal__form"},n=document.querySelector(".profile"),o=n.querySelector("#profile-edit-button"),l=n.querySelector(".profile__add-button"),a=n.querySelector(".profile__image-button"),c=document.querySelector("#profile-edit-modal"),d=(Array.from(c.querySelectorAll(".modal__input")),Array.from(document.querySelectorAll(i.formSelector))),h={},_=new class{constructor(e){let{titleSelector:t,descriptionSelector:r,avatarSelector:s}=e;this._titleElement=document.querySelector(t),this._descriptionElement=document.querySelector(r),this._avatarElement=document.querySelector(s)}getUserInfo(){const e={};return e.title=this._titleElement.textContent,e.description=this._descriptionElement.textContent,e}setUserInfo(e){this._titleElement.textContent=e.title,this._descriptionElement.textContent=e.description}setUserAvatar(e){this._avatarElement.setAttribute("src",e)}}({titleSelector:".profile__title",descriptionSelector:".profile__description",avatarSelector:".profile__image"}),u=new class extends r{constructor(e,t){let{submitButtonSelector:r}=t;super(e),this._form=this._popupElement.querySelector(".modal__form"),this._button=this._popupElement.querySelector(r),this._originalButtonText=this._button.textContent}renderSaving(e){this._button.textContent=e?"Saving...":this._originalButtonText}setCallback(e){this._callback=e}setEventListeners(){this._form.addEventListener("submit",(e=>{e.preventDefault(),this._callback()})),super.setEventListeners()}}("#modal-confirm-delete",i),m=new s("#modal-change-profile",(function(e){m.renderSaving(!0),p.updateAvatar(e).then((e=>{_.setUserAvatar(e.avatar),m.close()})).catch(console.error).finally((()=>{m.renderSaving(!1)}))}),i),p=new class{constructor(e){let{baseUrl:t,headers:r}=e;this._baseUrl=t,this._headers=r}renderResult(e){return e.ok?e.json():Promise.reject(`Error :${e.status}`)}async getUserInfo(){const e=await fetch(`${this._baseUrl}/users/me`,{headers:this._headers});return this.renderResult(e)}async getInitialCards(){const e=await fetch(`${this._baseUrl}/cards`,{headers:this._headers});return this.renderResult(e)}async editProfile(e){let{title:t,description:r}=e;const s=await fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:r})});return this.renderResult(s)}async addCard(e){let{name:t,link:r}=e;const s=await fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:r})});return this.renderResult(s)}async deleteCard(e){const t=await fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers});return this.renderResult(t)}likeCard(e,t){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:t?"DELETE":"PUT",headers:this._headers})}async updateAvatar(e){let{link:t}=e;const r=await fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})});return this.renderResult(r)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"03277265-2976-4ddf-957d-4d187bc8c844","Content-Type":"application/json"}});p.getUserInfo().then((e=>{_.setUserInfo({name:e.name,description:e.about}),_.setUserAvatar(e.avatar)})).catch(console.error);const E=new class{constructor(e,t){let{renderer:r}=e;this._renderer=r,this._container=document.querySelector(t)}rendererItems=e=>{e.reverse().forEach((e=>{this.addItem(this._renderer(e))}))};addItem=e=>{this._container.prepend(e)}}({items:[],renderer:g},".cards__list");p.getInitialCards().then((e=>{E.rendererItems(e)})).catch(console.error);const v=new class extends r{constructor(e){super(e),this._previewImage=this._popupElement.querySelector(".modal__image"),this._previewImageTitle=this._popupElement.querySelector(".modal__image-title")}open(e){let{name:t,link:r}=e;console.log(t,r),this._previewImage.src=r,this._previewImage.alt=t,this._previewImageTitle.textContent=t,super.open()}}("#image-preview-modal"),S=new s("#profile-edit-modal",(function(e){S.renderSaving(!0),p.editProfile(e).then((e=>{_.setUserInfo({title:e.name,description:e.about}),S.close()})).catch(console.error).finally((()=>{S.renderSaving(!1)}))}),i);function f(e){u.open(),u.setCallback((()=>{u.renderSaving(!0),p.deleteCard(e.getId()).then((()=>{e.deleteCard(),u.close()})).catch(console.error).finally((()=>{u.renderSaving(!1)}))}))}const b=new s("#profile-add-modal",(function(e){b.renderSaving(!0),p.addCard(e).then((e=>{const t=g(e);E.addItem(t),h.addCardForm.resetForm(),h.addCardForm.disableSubmit(),b.close()})).catch(console.error).finally((()=>{b.renderSaving(!1)}))}),i);function g(t){return new e(t,"#card",y,f).generateCard()}function y(e,t){v.open({name:e,link:t})}d.forEach((e=>{const r=new t(e,i),s=e.getAttribute("name");r.enableValidation(),h[s]=r})),o.addEventListener("click",(()=>{_.getUserInfo(),h.profileForm.checkValidity(),S.open()})),l.addEventListener("click",(()=>b.open())),S.setEventListeners(),b.setEventListeners(),v.setEventListeners(),a.addEventListener("click",(()=>m.open())),m.setEventListeners(),u.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,